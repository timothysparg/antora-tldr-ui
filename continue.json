{
  "models": [
    {
      "title": "Claude 3.5 Sonnet",
      "provider": "anthropic",
      "model": "claude-3-5-sonnet-20241022"
    }
  ],
  "customCommands": [
    {
      "name": "dev-server",
      "description": "Start development server with live reload",
      "prompt": "Start the development server using `npm start`. The server will be available at http://localhost:5252 with live reload for changes to src/ files."
    },
    {
      "name": "bundle",
      "description": "Build and bundle UI for production",
      "prompt": "Create the production UI bundle using `npm run build`. This creates build/ui-bundle.zip after running lint checks."
    },
    {
      "name": "lint",
      "description": "Run all linting checks",
      "prompt": "Run `npm run lint` to check both CSS (stylelint) and JavaScript (eslint) code quality."
    },
    {
      "name": "format",
      "description": "Format JavaScript code",
      "prompt": "Run `npm run format` to format JavaScript files using prettier-eslint."
    },
    {
      "name": "clean",
      "description": "Clean build artifacts",
      "prompt": "Run `npm run clean` to remove build artifacts and cached files."
    }
  ],
  "contextProviders": [
    {
      "name": "folder",
      "params": {
        "folders": [
          "src",
          "preview-src"
        ]
      }
    },
    {
      "name": "file",
      "params": {
        "files": [
          "package.json",
          ".mise.toml",
          "README.adoc",
          "CLAUDE.md"
        ]
      }
    }
  ],
  "docs": [
    {
      "title": "Antora Documentation",
      "startUrl": "https://docs.antora.org"
    },
    {
      "title": "Asciidoctor Documentation", 
      "startUrl": "https://docs.asciidoctor.org"
    },
    {
      "title": "Handlebars Documentation",
      "startUrl": "https://handlebarsjs.com/guide/"
    }
  ],
  "rules": [
    "This is the Asciidoctor Docs UI project - a custom Antora UI bundle built on top of the Antora default UI using Vite as the build system.",
    "Always run `npm run lint` and `npm run format` before committing changes.",
    "The development server runs at http://localhost:5252 with live reload for src/ file changes.",
    "Template files use Handlebars syntax and are organized hierarchically in src/partials/",
    "Preview content for testing is in preview-src/ directory using AsciiDoc format.",
    "The project uses asciidoctor-kroki for diagram rendering via https://kroki.io service.",
    "Node.js version is managed via .mise.toml file.",
    "UI bundle is specifically designed for Antora static site generator.",
    "Build artifacts are created in build/ and preview-dist/ - run `npm run clean` when making structural changes.",
    "Changes to ui-model.yml require server restart to take effect.",
    "COMMIT MESSAGE FORMAT: Follow conventional commits format with these sections: 1) Subject line (feat:, fix:, etc.), 2) Body (optional), 3) User-Prompt section (second to last), 4) Co-Authors section (must be last lines).",
    "USER-PROMPT SECTION: Include user prompts/requests relevant to the changes. Prefix with 'User-Prompt:' on own line. Add chronologically. DO NOT include save/commit instructions. For multi-line prompts, indent continuation lines with 2 spaces for readability. Examples: 'User-Prompt: please remove the navigation section' or 'User-Prompt: for the kroki server, lets just use https://kroki.io . When we install\\n  the kroki plugin remember to install as a dev dependency. To verify run the\\n  preview page and find the page that has a diagram in it.'",
    "CO-AUTHORS SECTION: Must be final lines. Add exactly two Co-Authors: 1) Continue tool (Continue CLI, Continue VS Code, or Continue JetBrains - NEVER use 'Claude Code'), 2) AI model name (Claude 3.5 Sonnet, etc). Format examples: 'Co-Authored-By: Continue CLI <noreply@continue.dev>' or 'Co-Authored-By: Continue VS Code <noreply@continue.dev>' followed by 'Co-Authored-By: Claude 3.5 Sonnet <noreply@anthropic.com>'. DO NOT use Claude Code attribution - this is for Continue.dev usage only.",
    "MULTIPLE COMMITS: Split commits when changes serve different purposes or affect different domains. Guidelines: 1) Separate feature additions from configuration changes, 2) Split functional changes from documentation/tooling setup, 3) Group related changes that solve the same problem together. Examples: Split 'Add kroki diagram support' (package.json, build-preview-pages.js, fix syntax) from 'Add Continue.json configuration' (tooling setup). Split UI changes (template modifications) from content changes (AsciiDoc files).",
    "COMMIT SPLITTING SIGNALS: Split if commit message needs multiple 'feat:'/'fix:' prefixes, affects unrelated file types (build tools + templates + docs), or mixes user-facing features with developer tooling setup.",
    "FILE STAGING: CRITICAL - Use selective staging with 'git add <specific-files>' for each commit. NEVER use 'git add .' when making multiple commits. Always verify staged files with 'git status' before committing. Example: First commit 'git add package.json build-preview-pages.js static-sites.adoc', then second commit 'git add continue.json'."
  ],
  "systemMessage": "You are working on the Asciidoctor Docs UI project, a custom Antora UI bundle. This project uses Vite for builds, Handlebars for templates, and provides a blog-focused UI theme. Key technologies include PostCSS, Rollup (via Vite), Highlight.js, and Asciidoctor core. The project has MCP integration for Playwright browser testing, Brave search, and Context7 documentation lookup. Always follow the development workflow: lint code, test changes, and use proper conventional commit messages with User-Prompt sections and Co-Authors attribution.",
  "experimental": {
    "modelRoles": {
      "inlineEdit": "claude-3-5-sonnet-20241022"
    }
  }
}
